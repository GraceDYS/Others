#include<bits/stdc++.h>
using namespace std;
//冒泡 
void bubbleSort(int arr[], int n){
	for(int i=0;i<n;i++){
		for(int j=0;j<n-1;j++){
			if(arr[j]>arr[j+1]){
				int tmp=arr[j];
				arr[j]=arr[j+1];
				arr[j+1]=tmp;
			}
		}
	}
	
}

//选择 
int findPos(int arr[], int n){
	//找最大值和其位置 
	int mx=arr[0], pos=0;
	for(int i=1;i<n;i++){
		if(arr[i]>mx){
			mx=arr[i];
			pos=i;
		}
	} 
	return pos;
}	
void selectionSort(int arr[], int n){
	//前面n个里面选最大，和最后一个比较 
	while(n>1){
		int pos=findPos(arr, n);
		int tmp=arr[pos];
		arr[pos]=arr[n-1];
		arr[n-1]=tmp;
		n--;
	}
}

//插入 
void Insert(int arr[], int n){
	int key=arr[n];
	int i=n;
	while(arr[i-1]>key){
		arr[i] = arr[i-1];
		i--;
		if(i==0) break;
	}
	arr[i]=key;
	
} 
void InsertionSort(int arr[], int n){
	for(int i=1;i<n;i++){
		Insert(arr, i);
	}
}

 
int main(){
	int arr[]={6,5,2,1,4,3,8,9};
	int i;
	//冒泡 O(n^2)   O(1) 稳定 
	//两两排序找最小，排n躺 
	//bubbleSort(arr,8);
	
	//选择 O(n^2)   O(1) 不稳定  
	//每次走一遍数组，找到最大的数字和最后一个数字比较 
	//selectionSort(arr,8); 
	
	// O(n^2)   O(1) 稳定  
	//插入 分成两段，已经排好序的和未排好序的（就像打扑克抓牌） 
	//选一个key,arr[i-1]和key比较，比key大，arr[i]=arr[i-1],i-- 
	InsertionSort(arr, 8);
	
	return 0;
} 
