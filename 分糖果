int candy(vector<int>& ratings) {
        int size = ratings.size() + 1;
        // 加入一个无穷大来弹出所有元素
        ratings.push_back(INT_MAX);
        // 初始化所有位置的糖果数为1
        vector<int> nums(size, 1);
        // 单调递减栈
        stack<int> s;
        s.push(0);
        int res = 0;
        for (int i = 1; i < size; ++i) {
            while (!s.empty()) {
                if (ratings[i] <= ratings[s.top()]) {
                    break;
                } else {
                    int index = s.top();
                    s.pop();
                    if (index < size - 1 && ratings[index] > ratings[index + 1]) {
                        nums[index] = max(nums[index], nums[index + 1] + 1);
                    }
                    if (index > 0 && ratings[index] > ratings[index - 1]) {
                        nums[index] = max(nums[index], nums[index - 1] + 1);
                    }
                    // 处于波谷的位置，可以结算，如果他比相邻的孩子表现好，可以加糖果；
                    res += nums[index];
                }
            }
            s.push(i);
        }
        return res;
    }
